Zdefiniuj prostą klasę abstrakcyjną Figura, która zawiać będzie:
- informacje o położeniu na ekranie (dwie współrzędne typu double).
- setery i getery położenia.
- czysto wirtualne metody do wyznaczania pola powierzchni i obwodu figury.
Wskazówki: Pamiętaj, że jeśli choć jedna metoda klasy jest czysto wirtualna to nie
ma ona implementacji. Taka klasa z automatu stanie się klasą abstrakcyjną i nie
będzie zatem można tworzyć samodzielnej instancji tej klasy w programie. Dla metod
czysto wirtualnych nie definiujemy ciała i musimy ich prototyp oznaczyć w specyficzny sposób. Położenie możesz przechowywać w strukturze.
■ Zdefiniuj klasy: Koło, Prostokąt i Trójkąt jako klasy pochodne od klasy figura.
Dodaj do nich minimum potrzebnej informacji koniecznej do wyliczenia dla nich pól
powierzchni i obwodów.
Wskazówki: Zastanów się co jest potrzebne, aby dało się policzyć wskazane cechy
geometryczne tych figur. Staraj się stosować opis najprostszy jak się da, ale pamiętaj, aby wszystkie dane były typów rzeczywistych.
■ Dla każdej klasy pochodnej zdefiniuj interfejs (setery, getery) oraz konstruktory argumentowe (jawnie wyklucz domyślne).
Wskazówki: Zwróć uwagę, aby w konstruktorach klas pochodnych (na liście inicjalizacyjnej) zawsze wskazywać który konstruktor klasy bazowej ma być użyty.
■ Dodaj finalną klasę Kwadrat jako pochodną od Prostokąta. Korzystając z wyjątków
od typu dziedziczenia i/lub dziedziczenia niepublicznego, tak odziedzicz interfejs
klasy bazowej, aby w klasie pochodnej nie było zbędnych metod.
Wskazówki: Zauważ, że kwadrat jest szczególnym typem prostokąta, ale do jego opisu
potrzeba mniej informacji. Jeśli zatem do ustawienia parametrów geometrycznych
prostokąta potrzebne były setery i etery obu boków, tak w kwadracie wystarczą tylko te jednego boku. To jest ważne, aby nie dało się dla kwadratu ustawiać danych,
których on nie używa, a które dostaliśmy mimowolnie z klasy bazowej.
■ Dla każdej z klas pochodnych zdefiniuj właściwe wersje metod obliczających pola
powierzchni i obwody.
Wskazówki: Koniecznie pamiętaj o specyfikatorze override, aby upewnić się, że zdefiniowane metody na pewno przeciążaj metodę wirtualną.
Opracowanie: dr inż. Łukasz Maliński i mgr inż. Błażej Nycz, Politechnika Śląska, 2024
■ Dla całej hierarchii klas dodaj funkcjonalność zliczania i odczytywania, ile
jest wszystkich figur w programie. Zadbaj, aby żadna figura nie była liczona więcej niż jeden raz.
Wskazówki: To jest w zasadzie powtórzenie materiału z poprzedniego tematu. Ważne
jest by się zastanowić, w których konstruktorach i destruktorach należy umieścić
inkrementacje i dekrementacje licznika. Tak, potrzebny jest tylko jeden licznik,
gdyż interesuje nas liczba wszystkich figur bez podziału na ich typy szczegółowe.
Pamiętaj, że każda klasa pochodna od klasy Figura, jest figurą.
■ Napisz krótki program, w którym zdefiniuj taką tablicę 10 elementów, aby dało
się w niej przechować dowolny typ pochodny od Figury. Poprzepisuj do niej instancje różnych figur geometrycznych o rożnych parametrach. Na koniec policz sumaryczne pole wszystkich figur zebranych w tej tablicy.






#include <iostream>
#include <cmath>
#include <vector>

using namespace std;

class Figura {
protected:
    struct Polozenie {
        double x, y;
    } m_polozenie;

public:
    void setPolozenie(double x, double y) {
        m_polozenie.x = x;
        m_polozenie.y = y;
    }

    double getPolozenieX() const { return m_polozenie.x; }
    double getPolozenieY() const { return m_polozenie.y; }

    virtual double polePowierzchni() const = 0;
    virtual double obwod() const = 0;

    virtual ~Figura() = default;
};

class Kolo : public Figura {
private:
    double m_promien;

public:
    Kolo(double x, double y, double promien) : m_promien(promien) {
        setPolozenie(x, y);
    }

    double polePowierzchni() const override {
        return M_PI * m_promien * m_promien;
    }

    double obwod() const override {
        return 2 * M_PI * m_promien;
    }
};

class Prostokat : public Figura {
private:
    double m_dluzszyBok;
    double m_krotszyBok;

public:
    Prostokat(double x, double y, double dluzszyBok, double krotszyBok)
        : m_dluzszyBok(dluzszyBok), m_krotszyBok(krotszyBok) {
        setPolozenie(x, y);
    }

    double polePowierzchni() const override {
        return m_dluzszyBok * m_krotszyBok;
    }

    double obwod() const override {
        return 2 * (m_dluzszyBok + m_krotszyBok);
    }
};

class Trojkat : public Figura {
private:
    double m_bokA;
    double m_bokB;
    double m_bokC;

public:
    Trojkat(double x, double y, double bokA, double bokB, double bokC)
        : m_bokA(bokA), m_bokB(bokB), m_bokC(bokC) {
        setPolozenie(x, y);
    }

    double polePowierzchni() const override {
        double p = (m_bokA + m_bokB + m_bokC) / 2;
        return sqrt(p * (p - m_bokA) * (p - m_bokB) * (p - m_bokC));
    }

    double obwod() const override {
        return m_bokA + m_bokB + m_bokC;
    }
};

class Kwadrat : public Prostokat {
public:
    Kwadrat(double x, double y, double bok)
        : Prostokat(x, y, bok, bok) {}
};

class LicznikFigur {
private:
    static int m_licznik;

public:
    LicznikFigur() { m_licznik++; }
    ~LicznikFigur() { m_licznik--; }

    static int getLiczbaFigur() { return m_licznik; }
};

int LicznikFigur::m_licznik = 0;

int main() {
    vector<Figura*> figury;

    // Tworzenie i dodawanie figur do wektora
    figury.push_back(new Kolo(0, 0, 5));
    figury.push_back(new Prostokat(0, 0, 4, 6));
    figury.push_back(new Trojkat(0, 0, 3, 4, 5));
    figury.push_back(new Kwadrat(0, 0, 5));

    // Obliczanie sumy pól powierzchni wszystkich figur
    double sumaPol = 0.0;
    for (const auto& figura : figury) {
        sumaPol += figura->polePowierzchni();
    }

    // Wypisanie sumy pól powierzchni i liczby wszystkich figur
    cout << "Sumaryczne pole powierzchni wszystkich figur: " << sumaPol << endl;
    cout << "Liczba wszystkich figur: " << LicznikFigur::getLiczbaFigur() << endl;

    // Zwolnienie pamięci zaalokowanej dla figur
    for (const auto& figura : figury) {
        delete figura;
    }

    return 0;
}
